#!/usr/bin/env python
#
# Copyright 2012 Nathaniel McCallum
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import json
import os
import re

devices = []
for dir in os.listdir('/sys/bus/usb/devices'):
  d = os.path.join('/sys/bus/usb/devices', dir)
  
  try:
      # NOTE: device is actually BCD, not hex
      device = {}
      device['vendor']   = int(open(os.path.join(d, 'idVendor')).read(), 16)
      device['product']  = int(open(os.path.join(d, 'idProduct')).read(), 16)
      device['device']   = int(open(os.path.join(d, 'bcdDevice')).read(), 16)
      device['class']    = int(open(os.path.join(d, 'bDeviceClass')).read(), 16)
      device['subclass'] = int(open(os.path.join(d, 'bDeviceClass')).read(), 16)
      device['protocol'] = int(open(os.path.join(d, 'bDeviceClass')).read(), 16)
      device['ifaces']  = {}
      
      matcher = re.compile("^%s:([0-9]+)\.([0-9]+)$" % dir).match
      for f in os.listdir(d):
        match = matcher(f)
        if not match:
          continue
        
        c = int(match.group(1))
        i = int(match.group(2))
        
        device['ifaces'][c] = device['ifaces'].get(c, {})
        device['ifaces'][c][i] = {}
        device['ifaces'][c][i]['class']    = int(open(os.path.join(os.path.join(d, f), 'bInterfaceClass')).read(), 16)
        device['ifaces'][c][i]['subclass'] = int(open(os.path.join(os.path.join(d, f), 'bInterfaceSubClass')).read(), 16)
        device['ifaces'][c][i]['protocol'] = int(open(os.path.join(os.path.join(d, f), 'bInterfaceProtocol')).read(), 16)
        
      devices.append(device)
  except IOError:
      pass
  

print(json.dumps(devices))
